services:


  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1
    hostname: zookeeper-1
    ports:
      - "2181:2181"
      - "2281:2281"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SECURE_CLIENT_PORT: 2281
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
      ZOOKEEPER_SSL_CLIENT_AUTH: need
      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/zookeeper-1.keystore.jks
      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${ZOOKEEPER_1_KEYSTORE_PASSWORD}
      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/zookeeper-1.truststore.jks
      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${ZOOKEEPER_1_TRUSTSTORE_PASSWORD}
      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
    volumes:
      - ./secrets/zookeeper-1:/var/private/ssl
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  zookeeper-2:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-2
    hostname: zookeeper-2
    ports:
      - "2182:2182"
      - "2282:2282"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_SECURE_CLIENT_PORT: 2282
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
      ZOOKEEPER_SSL_CLIENT_AUTH: need
      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/zookeeper-2.keystore.jks
      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${ZOOKEEPER_2_KEYSTORE_PASSWORD}
      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/zookeeper-2.truststore.jks
      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${ZOOKEEPER_2_TRUSTSTORE_PASSWORD}
      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
    volumes:
      - ./secrets/zookeeper-2:/var/private/ssl
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2182", "|", "grep", "imok" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  zookeeper-3:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-3
    hostname: zookeeper-3
    ports:
      - "2183:2183"
      - "2283:2283"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_SECURE_CLIENT_PORT: 2283
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
      ZOOKEEPER_SSL_CLIENT_AUTH: need
      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/zookeeper-3.keystore.jks
      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${ZOOKEEPER_3_KEYSTORE_PASSWORD}
      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/zookeeper-3.truststore.jks
      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${ZOOKEEPER_3_TRUSTSTORE_PASSWORD}
      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
    volumes:
      - ./secrets/zookeeper-3:/var/private/ssl
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2183", "|", "grep", "imok" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2281,zookeeper-2:2282,zookeeper-3:2283"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-1.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_1_KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_1_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-1.keystore.jks
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${KAFKA_1_KEYSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-1.truststore.jks
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_1_TRUSTSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets/kafka-1:/var/private/ssl
    networks:
      - kafka-network
    depends_on:
      zookeeper-1:
        condition: service_healthy
      zookeeper-2:
        condition: service_healthy
      zookeeper-3:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2281,zookeeper-2:2282,zookeeper-3:2283"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-2.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_2_KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_2_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-2.keystore.jks
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${KAFKA_2_KEYSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-2.truststore.jks
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_2_TRUSTSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets/kafka-2:/var/private/ssl
    networks:
      - kafka-network
    depends_on:
      zookeeper-1:
        condition: service_healthy
      zookeeper-2:
        condition: service_healthy
      zookeeper-3:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9093" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2281,zookeeper-2:2282,zookeeper-3:2283"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-3.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_3_KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-3.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_3_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /var/private/ssl/kafka-3.keystore.jks
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${KAFKA_3_KEYSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /var/private/ssl/kafka-3.truststore.jks
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_3_TRUSTSTORE_PASSWORD}
      KAFKA_ZOOKEEPER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets/kafka-3:/var/private/ssl
    networks:
      - kafka-network
    depends_on:
      zookeeper-1:
        condition: service_healthy
      zookeeper-2:
        condition: service_healthy
      zookeeper-3:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9094" ]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3


  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: fraud-detection
    ports:
      - "5432:5432"
    networks:
      - kafka-network


  transaction-api:
    build:
      context: transaction-api
      dockerfile: Dockerfile
    container_name: transaction-api
    hostname: transaction-api
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
      KAFKA_TRUSTSTORE_LOCATION: file:/app/secrets/transaction-api.truststore.jks
      KAFKA_TRUSTSTORE_PASSWORD: ${TRANSACTION_API_TRUSTSTORE_PASSWORD}
      KAFKA_KEYSTORE_LOCATION: file:/app/secrets/transaction-api.keystore.jks
      KAFKA_KEYSTORE_PASSWORD: ${TRANSACTION_API_KEYSTORE_PASSWORD}
    volumes:
      - ./secrets/transaction-api:/app/secrets
    networks:
      - kafka-network
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy


  fraud-detector:
    build:
      context: fraud-detector
      dockerfile: Dockerfile
    container_name: fraud-detector
    hostname: fraud-detector
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
      KAFKA_TRUSTSTORE_LOCATION: file:/app/secrets/fraud-detector.truststore.jks
      KAFKA_TRUSTSTORE_PASSWORD: ${FRAUD_DETECTOR_TRUSTSTORE_PASSWORD}
      KAFKA_KEYSTORE_LOCATION: file:/app/secrets/fraud-detector.keystore.jks
      KAFKA_KEYSTORE_PASSWORD: ${FRAUD_DETECTOR_KEYSTORE_PASSWORD}
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/fraud-detection
      DATASOURCE_USER: ${POSTGRES_USER}
      DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./secrets/fraud-detector:/app/secrets
    networks:
      - kafka-network
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy


  transaction-generator:
    build:
      context: transaction-generator
      dockerfile: Dockerfile
    container_name: transaction-generator
    hostname: transaction-generator
    networks:
      - kafka-network
    depends_on:
      - transaction-api


networks:
  kafka-network:
    driver: bridge
    name: kafka-network